/*
 * This file is generated by jOOQ.
*/
package top.joylife.lemon.jooq.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import top.joylife.lemon.jooq.Keys;
import top.joylife.lemon.jooq.Lemon;
import top.joylife.lemon.jooq.tables.records.TArticleRecord;


/**
 * 文章表
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TArticle extends TableImpl<TArticleRecord> {

    private static final long serialVersionUID = 1538064895;

    /**
     * The reference instance of <code>lemon.t_article</code>
     */
    public static final TArticle T_ARTICLE = new TArticle();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TArticleRecord> getRecordType() {
        return TArticleRecord.class;
    }

    /**
     * The column <code>lemon.t_article.id</code>.
     */
    public final TableField<TArticleRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>lemon.t_article.title</code>. 标题
     */
    public final TableField<TArticleRecord, String> TITLE = createField("title", org.jooq.impl.SQLDataType.VARCHAR.length(45).nullable(false), this, "标题");

    /**
     * The column <code>lemon.t_article.summary</code>. 摘要
     */
    public final TableField<TArticleRecord, String> SUMMARY = createField("summary", org.jooq.impl.SQLDataType.VARCHAR.length(400).nullable(false), this, "摘要");

    /**
     * The column <code>lemon.t_article.author</code>. 作者
     */
    public final TableField<TArticleRecord, String> AUTHOR = createField("author", org.jooq.impl.SQLDataType.VARCHAR.length(45).nullable(false), this, "作者");

    /**
     * The column <code>lemon.t_article.source</code>. 文章来源
     */
    public final TableField<TArticleRecord, String> SOURCE = createField("source", org.jooq.impl.SQLDataType.VARCHAR.length(45).nullable(false), this, "文章来源");

    /**
     * The column <code>lemon.t_article.sort</code>. 排序
     */
    public final TableField<TArticleRecord, Integer> SORT = createField("sort", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "排序");

    /**
     * The column <code>lemon.t_article.click_no</code>. 点击数
     */
    public final TableField<TArticleRecord, Integer> CLICK_NO = createField("click_no", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "点击数");

    /**
     * The column <code>lemon.t_article.scan_no</code>. 浏览数
     */
    public final TableField<TArticleRecord, Integer> SCAN_NO = createField("scan_no", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "浏览数");

    /**
     * The column <code>lemon.t_article.comment_no</code>. 评论数
     */
    public final TableField<TArticleRecord, Integer> COMMENT_NO = createField("comment_no", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "评论数");

    /**
     * The column <code>lemon.t_article.create_time</code>. 创建时间
     */
    public final TableField<TArticleRecord, Timestamp> CREATE_TIME = createField("create_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "创建时间");

    /**
     * The column <code>lemon.t_article.update_time</code>. 更新时间
     */
    public final TableField<TArticleRecord, Timestamp> UPDATE_TIME = createField("update_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "更新时间");

    /**
     * The column <code>lemon.t_article.status</code>. 状态标识,0-正常，1-删除
     */
    public final TableField<TArticleRecord, Boolean> STATUS = createField("status", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BOOLEAN)), this, "状态标识,0-正常，1-删除");

    /**
     * The column <code>lemon.t_article.praise_no</code>.
     */
    public final TableField<TArticleRecord, Integer> PRAISE_NO = createField("praise_no", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>lemon.t_article.tread_no</code>.
     */
    public final TableField<TArticleRecord, Integer> TREAD_NO = createField("tread_no", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * Create a <code>lemon.t_article</code> table reference
     */
    public TArticle() {
        this("t_article", null);
    }

    /**
     * Create an aliased <code>lemon.t_article</code> table reference
     */
    public TArticle(String alias) {
        this(alias, T_ARTICLE);
    }

    private TArticle(String alias, Table<TArticleRecord> aliased) {
        this(alias, aliased, null);
    }

    private TArticle(String alias, Table<TArticleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "文章表");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Lemon.LEMON;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TArticleRecord, Integer> getIdentity() {
        return Keys.IDENTITY_T_ARTICLE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TArticleRecord> getPrimaryKey() {
        return Keys.KEY_T_ARTICLE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TArticleRecord>> getKeys() {
        return Arrays.<UniqueKey<TArticleRecord>>asList(Keys.KEY_T_ARTICLE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TArticle as(String alias) {
        return new TArticle(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TArticle rename(String name) {
        return new TArticle(name, null);
    }
}
